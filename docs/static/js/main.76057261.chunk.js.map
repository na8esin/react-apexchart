{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","updateCharts","bind","state","optionsMixedChart","chart","id","toolbar","show","plotOptions","bar","columnWidth","endingShape","stroke","width","xaxis","categories","markers","size","strokeWidth","fillOpacity","strokeOpacity","hover","yaxis","tickAmount","min","max","seriesMixedChart","name","type","data","optionsRadial","radialBar","startAngle","endAngle","hollow","margin","background","image","undefined","imageOffsetX","imageOffsetY","position","dropShadow","enabled","top","left","blur","opacity","track","dataLabels","showOn","offsetY","color","fontSize","value","formatter","val","fill","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","lineCap","labels","seriesRadial","optionsBar","stacked","stackType","horizontal","axisBorder","axisTicks","legend","horizontalAlign","seriesBar","newMixedSeries","newBarSeries","this","forEach","s","map","Math","floor","random","push","setState","className","options","series","height","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.76057261.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCharts = this.updateCharts.bind(this);\n\n    this.state = {\n      optionsMixedChart: {\n        chart: {\n          id: \"basic-bar\",\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"50%\",\n            endingShape: \"arrow\"\n          }\n        },\n        stroke: {\n          width: [4, 0, 0]\n        },\n        xaxis: {\n          categories: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n        },\n        markers: {\n          size: 6,\n          strokeWidth: 3,\n          fillOpacity: 0,\n          strokeOpacity: 0,\n          hover: {\n            size: 8\n          }\n        },\n        yaxis: {\n          tickAmount: 5,\n          min: 0,\n          max: 100\n        }\n      },\n      seriesMixedChart: [\n        {\n          name: \"series-1\",\n          type: \"line\",\n          data: [5, 40, 25, 50, 49, 21, 70, 51]\n        },\n        {\n          name: \"series-2\",\n          type: \"column\",\n          data: [23, 12, 54, 61, 32, 56, 81, 19]\n        },\n        {\n          name: \"series-3\",\n          type: \"column\",\n          data: [62, 12, 45, 55, 76, 41, 23, 43]\n        }\n      ],\n      optionsRadial: {\n        plotOptions: {\n          radialBar: {\n            startAngle: -135,\n            endAngle: 225,\n            hollow: {\n              margin: 0,\n              size: \"70%\",\n              background: \"#fff\",\n              image: undefined,\n              imageOffsetX: 0,\n              imageOffsetY: 0,\n              position: \"front\",\n              dropShadow: {\n                enabled: true,\n                top: 3,\n                left: 0,\n                blur: 4,\n                opacity: 0.24\n              }\n            },\n            track: {\n              background: \"#fff\",\n              strokeWidth: \"67%\",\n              margin: 0, // margin is in pixels\n              dropShadow: {\n                enabled: true,\n                top: -3,\n                left: 0,\n                blur: 4,\n                opacity: 0.35\n              }\n            },\n\n            dataLabels: {\n              showOn: \"always\",\n              name: {\n                offsetY: -20,\n                show: true,\n                color: \"#888\",\n                fontSize: \"13px\"\n              },\n              value: {\n                formatter: function(val) {\n                  return val;\n                },\n                color: \"#111\",\n                fontSize: \"30px\",\n                show: true\n              }\n            }\n          }\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shade: \"dark\",\n            type: \"horizontal\",\n            shadeIntensity: 0.5,\n            gradientToColors: [\"#ABE5A1\"],\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 100]\n          }\n        },\n        stroke: {\n          lineCap: \"round\"\n        },\n        labels: [\"Percent\"]\n      },\n      seriesRadial: [76],\n      optionsBar: {\n        chart: {\n          stacked: true,\n          stackType: \"100%\",\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true\n          }\n        },\n        dataLabels: {\n          dropShadow: {\n            enabled: true\n          }\n        },\n        stroke: {\n          width: 0\n        },\n        xaxis: {\n          categories: [\"Fav Color\"],\n          labels: {\n            show: false\n          },\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        fill: {\n          opacity: 1,\n          type: \"gradient\",\n          gradient: {\n            shade: \"dark\",\n            type: \"vertical\",\n            shadeIntensity: 0.35,\n            gradientToColors: undefined,\n            inverseColors: false,\n            opacityFrom: 0.85,\n            opacityTo: 0.85,\n            stops: [90, 0, 100]\n          }\n        },\n\n        legend: {\n          position: \"bottom\",\n          horizontalAlign: \"right\"\n        }\n      },\n      seriesBar: [\n        {\n          name: \"blue\",\n          data: [32]\n        },\n        {\n          name: \"green\",\n          data: [41]\n        },\n        {\n          name: \"yellow\",\n          data: [12]\n        },\n        {\n          name: \"red\",\n          data: [65]\n        }\n      ]\n    };\n  }\n\n  updateCharts() {\n    const max = 90;\n    const min = 30;\n    const newMixedSeries = [];\n    const newBarSeries = [];\n\n    this.state.seriesMixedChart.forEach(s => {\n      const data = s.data.map(() => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      });\n      newMixedSeries.push({ data: data, type: s.type });\n    });\n\n    this.state.seriesBar.forEach(s => {\n      const data = s.data.map(() => {\n        return Math.floor(Math.random() * (180 - min + 1)) + min;\n      });\n      newBarSeries.push({ data, name: s.name });\n    });\n\n    this.setState({\n      seriesMixedChart: newMixedSeries,\n      seriesBar: newBarSeries,\n      seriesRadial: [Math.floor(Math.random() * (90 - 50 + 1)) + 50]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.optionsMixedChart}\n              series={this.state.seriesMixedChart}\n              type=\"line\"\n              width=\"500\"\n            />\n          </div>\n\n          <div className=\"col radial-chart\">\n            <Chart\n              options={this.state.optionsRadial}\n              series={this.state.seriesRadial}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col percentage-chart\">\n            <Chart\n              options={this.state.optionsBar}\n              height={140}\n              series={this.state.seriesBar}\n              type=\"bar\"\n              width={500}\n            />\n          </div>\n\n          <p className=\"col\">\n            <button onClick={this.updateCharts}>Update!</button>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}